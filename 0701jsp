JSP三大指令

page-->最复杂<%@page langue="java" info="xxx" contentType="text/html;charset=utf-8"%>
pageEncoding:指定当前页面的编码；在服务器要把JSP编译成.java时需要使用pageEncoding
contentType：表示添加一个响应头：content-Type等同于response.setContentType("text/html;charset=utf-8");
如果两个属性只提供一个，那么另一个的默认值为设置的那一个；
如果两个树顶都没有设置，那么默认为ISO
import:导包
errorPage:当前页面如果抛出异常，那么要转发到哪一个页面，由errorPage来指定
isErrorPage:指定当前页面是否为处理错误的页面，这个页面会设置状态码为500，而且这个页面可以使用9大内置对象中的exception;
autoFlush指定jsp的输出流缓冲区满时，是否自动刷新，默认为true，如果为false，那么缓冲区满时抛出异常；
buffer:指定缓冲区大小默认为8kb,通常不需要修改
isELIgnored:是否忽略EL表达式，默认值为false,不忽略（默认为支持）
language:(指定当前jsp编译后的语言类型，默认值为java)
info:信息（没用）
inThreadSafe:当前的jsp是否支持并发访问（默认为false)
session:当前页面是否支持session，如果为false那么当前页面就没有session这个内置对象！
extends：让jsp生成的servlet去继承该属性指定的类

JSP九大内置对象
在JSP中无需船舰就可以使用的9个对象：
out(jspWriter):等同于response.getWritter(),用来想客户端发送文本数据；//输出流
config(ServletConfig):对应ServletConfig;
page:当前JSP页面的"this"即当前对象；Object page = this;(基本上没用）
pageContext(PageContext):页面上下文对象，
exception(Throwable):只有在错误页面中可以使用这个对象；
request(HttpServletRequest):即HttpServletRequest类的对象；
response(HttpServletResponse):即HttpServletResponse类的对象；
application(ServletContext):即ServletContext类的对象；
session(HttpSession):即HttpSession类的对象，不是每个JSP页面中都可以使用，如果在某个JSP页面中设置<%@page session="false"%>,说明这个页面不能使用session;

pageContext:
Servlet中有三大域，而JSP中有四大域，他是最后一个域对象；
ServletContext：整个应用程序
session:整个会话（一个会话中只有一个用户）；
requset:一个请求链；
pageContext:一个JSP页面；//这个域是在当前JSP页面和当前JSP页面中使用的标签中共享数据；
	>域对象
	>代理其他域：pageContext.setAttribute("xx","zzz",pageContext.SESSION_SCOPE);
	>全域查找：pageCext.findAttribute("xxx");从小到大依次查找 
	>获取其他内置对象

page-->最复杂
jsp指令的格式<%@page language="java" info ="xxx"...%>
*pageEncoding：指定当前JSP页面的编码。


include-->静态包含
与RequestDispatcher的include()方法的功能类似
<%@include%>他是JSP编译成JAVA文件时完成的，他们共同生成一个JAVA(就是一个servlet)文件，然后再生成一个class
RequestDispatcher的include()是一个方法，包含和被包含的是两个servlet，即两个.class，他们只是把相应的内容在运行时合并了。
作用：把页面分解了，使用包含的方式合在一起，这样一个页面中不变的部分是一个独立的JSP，只需要处理变化的页面。（为了可重用）

taglib-->导入标签库
属性：
prefix:制定标签库在本页面中的前缀。
uri:制定标签库的位置；
<%@taglib prefix="pre" uri="/xxx/xxx"%>     //前缀的用法<pre:test>

JSP的动作标签
这些JSP的动作标签与HTML提供的标签由本质的区别：
1.动作标签是由tomcat（服务器）来解释执行！与JAVA代码一样，都是在服务器端执行的
2.HTML标签是由浏览器来执行
<jsp:forwardL>:转发；它与RequestDispatcher的forward方法是一样的，一个是在servlet中使用，一个是在jsp中使用；
<jsp:include>:包含；与RequestDispatcher的include方法一样，一个是在servlet中使用，一个是在jsp中使用；
<jsp:param>:用来作为forward和include的子标签，用来给转发或包含的页面传递参数

修改/tomcat/conf/Context.xml
通常修改JSP不需要重启tomcat,修改servlet/java类修养重启tomcat，修改这一标签后改生命都不用重启tomcat了，此文件是定时操作，只时合开发时操作
<Context reloadable="true>

/tomcat/conf/web.xml
所有项目web.xml的父文件

javabean
javaBean的规范：
1.必须要有一个默认构造器
2.提供get/set方法，如果只有get方法，那么这个属性是只读属性
3.属性：有get/set方法的成全，还可以没有成员，只有get/set方法，属性名称由get/set方法提供，而不是成员名称
4.方法名称满足一定的规范，那么他就是属性；boolean类型的属性，他的读方法可以是IS开头，也可以是get开头

内省
内省类-->Bean信息-->属性描述符-->属性的get/set对应的Method-->可以反射了

commons-beanutils：依赖内省完成
>导包：
    >commons-beanutils.jar
    >commons-logging.jar
BeanUtils.getProperty(Object bean,String propertyName)
BeanUtils.setProperty(Object bean,String propertyName,String propertyValue)

commontUtils.toBean(Map map,Class class)

jsp中与javaBean相关的标签

<jsp:useBean>-->创建或查找Bean
*<jsp:useBean id="user1" class="xxxx" scope="page"/>       //在session域中查找名为user1的bean,如果不存在，则创建
<jsp:setProperty>
*<jsp:setProperty property="usrname" name="user1" value="admin"/>   //设置名为user1的这个javabean的usrname属性值为admin
<jsp:getProperty>
*<jsp:getProperty property="usrname name="user1" />     //获取名为user1的javabean的名为usrname属性值


EL表达式
1.EL是jsp的内置语言
jsp2.0开始，不让使用java脚本，而是使用el表达式和动态标签来替代java脚本
EL要替代的是<%=...%>也就是说EL只能做输出（JSTL标签做设置）

2.EL表达式来读取四大域
<%
    pageContext.setAttribute("xxx","pageContest_xxx")
    requset.setAttribute("xxx","request_xxx")
    session.setAttribute("xxx","session_xxx")
    application.setAttribute("xxx","application_xxx")
%>
${xxx}      //全域查找xxx的属性，如果不存在，输出空字符串，而不是null;
${pageScope.xxx}<br/>
${requsetScope.xxx}<br/>
${sessionScope.xxx}<br/>
${applicationScope.xxx}<br/>

3.javabean导航

4.EL可以输出的东西都在11个内置对象中：其中10个是Map,pageContext不是map,它就是PageContext类型；
1)param:对应参数，他是一个Map，其中Key参数名value是参数值,适用于单值的参数
2)paramValues:对应菜蔬，他是一个Map，其中Key参数名，value是多个参数值，适用于多值的参数
3)header:对应请求头，他是一个Map，其中key表示名称，value是单个头值，适用于单值请求头
4)headerValues:对应请求头，他是一个Map，其中key表示名称，value是多个头值，适用于多值请求头
5)initParam:获取<context-param>内的参数（项目中web.XML）
<context-param>
  	<param-name>xxx</param-name>
  	<param-value>SSS</param-value>
</context-param>
${initParam.xxx}
6)cookie:Map<String,Cookie>类型，其中key是cookie的name，value是cookie对象
${cookie.username.value}
7)pageContext:它就是PageContext类型${pageContext.request.contextPath}(所有项目的项目名称用这个取代！！！)


EL函数库（由JSTL提供的）
*导入标签库


