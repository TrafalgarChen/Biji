JSTL标签库
自定义标签
MVC设计模式
java三层架构

JSTL概述
*依赖EL
*需要导入jstl.jar包
*四大库：
    core:核心标签库
    fmt:格式化标签库
    sql:数据库标签库（没用）
    xml:xml标签库（没用）

导入标签库
*导入jar包
*配置XML文件
*在JSP页面中<%@taglib prefix="前缀" uri="路径(jsp/jstl/core)"%>

core-->c标签！
1.out和set
    *<c:out value="aaa"/>   //可以是字符串常量，也可以是表达式
    *<c:out value="${aaa}" defalut="xxx"/>当${aaa}不存在是，输出XXX字符串
    *<c:out escapeXml>  //默认值为"true"表示转义
    *<c:set var="a" value="hello"/>在pageContext中添加name为a,value为hello的数据
    *<c:set var="a" value="hello" scope="session"/>在session域中添加name为a,value为hello的数据
    var:变量名  
    value:变量值，可以是el表达式 
    scope:域，默认为page,可选值session,requese,page,application

2.remove
    *<remove>删除域变量
    var:变量名
    scope:如果不给出scope表示删除所有域中该名称的变量，如果指定了域，那么只删除该域的变量

3.url
    *value:指定一个路径，他会在路径前自动添加项目名
    <c:url value="/index.jsp"/>它会输出/项目名/index.jsp
    *子标签<c:param>用来给url后边添加参数，如：
    <c:url value="/index.jsp">
        <c:param name="usrname" value="zhangsan"/>      //可以对参数进行url编码
    </c:url>        //结果为/项目名/index.jsp?username=%fsfsqsfs
    *var：指定变量名，一旦添加了这个属性，那么这个url标签就不会输出到页面，而是把生成的URL保存到域中
    *scope:它与var一起使用，用来保存url

4.if:对应java中的if语句
    *<c:if test="布尔类型">....</c:if>:当test为真时，执行标签体内容

5.choose:对应java中的if/else if/.../else
//{ <c:set var="score" value="${param.score}"/>
    <c:choose>
        <c:when test="${score>100||score<0}">wrong number:${score}</c:when>
        <c:when test="${score>60}">good</c:when>
        <c:when test="${score=60}">goodluck</c:when>
        <c:otherwise>byebye</c:otherwise>
    </c:choose>
//}

6.forEach:
用来循环遍历数组、集合；还可以用来计数方式循环
//{
    <c:forEach var="i" begin="1" end="10" step="2">
    ${i}
    </c:forEach>
}等同于
//{
    for(int i=1; i <=10; i++)
}
属性：
    *var:循环变量
    *beain:设置循环变量从几开始
    *end:设置循环变量到几结束
    *step：设置步长；等同于java中的i++或i+=2;默认值为1；

//{
    <c:forEach items="${stra}" var="str">
        ${str}<br/>
    </c:forEach>
}等同于
//{
    for(String str:strs){
        ...
    }
}
属性：
items:指定要循环谁，它可以时一个数组或一个集合
var:把数组或集合中的每个元素赋值给var指定的变量

循环状态
可以使用varStatus来创建循环状态变量；
循环状态变量由如下属性：
    *count:循环元素的个数
    *index:循环元素的下表
    *first:是否为第一个元素
    *last:是否为最后一个元素
    *current:当前元素
//{
    <%
        Array<String> list = new ArrayList<String>();
        list.add("yi");
        list.add("er");
        list.add("three");
        pageContext.setAttribute("list",list);
    %>
    <c:forEach items="${list}" var="ele" varStatue="vs">
    ${vs.index} ${vs.count} ${vs.first}<br/>
    </c:forEach>
}

fmt标签库常用标签
fmt标签库时用格式化输出的，通常需要格式化的有时间和数字
<fmt:formatDate value="" pattern="yyyy-MM-dd HH:mm:ss"/>
value：指定一个Date类型的变量
pattern:用来指定输出的模板

<fmt:formatNumber value="" pattern""/>
<fmt:formateNumber value="${requestScope.num1}" pattern="0.00"/>    //保留小数点后两位（四舍五入），不足两位补0
<fmt:formateNumber value="${requestScope.num1}" pattern="#.##"/>    //保留小数点后两位（四舍五入），不补位




