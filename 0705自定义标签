自定义标签
步骤
    标签处理类（标签也是一个对象，那么久需要先有类）
    tld文件，他是一个XML
    页面中使用<%@taglib%>来指定tld文件的位置

标签处理类
    simpleTag接口：
        void doTag():每次执行标签时都会调用这个方法；
        JspTag getParent():返回父标签（非生命周期方法）
        void setParent(JspTag):设置父标签
        void setJspBody(JspFragment):设置标签体
        void setJspContext(JspContext):设置JSP上下文对象，它儿子是PageContext
    其中doTag()会在其他三个方法之后被tomcat调用
配置tld文件
    tld文件一般都放到web-inf之下，这样保证客户端访问不到
    <tag>
            <name>myTag1</name>     //指定当前标签的名称
            <tag-class>cn.t.tag.MyTag1</tag-class>  //指定当前标签的标签处理类
            <body-content>empty</body-content>      //指定标签体的类型，我们这里使用的是空标签
    </tag>
页面中指定tld文件位置
    <%@ taglib prefix="it" uri="/WEB-INF/tlds/MyTaga.tld" %>
    导标签库，就是为页面指定tld文件的位置

进阶
标签体内容
    empty:无标签体
    JSP:JSP2.0已经不支持这个类型了，表示标签体内容可以是：java脚本，可以是标签，可以是EL表达式
    scriptless:只能使用EL表达式，也可以是其他的标签
    tagdependent:标签体内容不会被执行，而是直接赋值标签处理类

不再执行标签下面内容的标签
    在标签处理类中的doTag()中使用SkipPageException来结束
    Tomcat会调用标签处理类的doTag()方法，然后Tomcat会得到SkipPageException,他会跳过本页面的其他内容
    
标签属性
    步骤：
        1.给标签处理类添加属性；
            为标签处理类添加属性，属性至少由一个set方法，这个set方法会在doTag()之前被tomcat执行，所以在doTag()之前就可以使用属性了；

        2.在tld文件中对属性就行配置；
            <tag>
            <name>myTag5</name>
            <tag-class>cn.t.tag.MyTag5</tag-class>
            <body-content>scriptless</body-content>
            <attribute>
                <name>test</name>       //指定属性名
                <required>true</required>   //指定属性是否是必须的
                <rtexprvalue>true</rtexprvalue>     //指定属性是否可以使用EL表达式
            </attribute>
            </tag>
    

    






